FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04

LABEL org.opencontainers.image.source=https://github.com/jckhoe/docling-enhanced

# Set environment to prevent interactive prompts during installation
ENV DEBIAN_FRONTEND=noninteractive

# Install Python 3.11 and system dependencies
RUN apt-get update && apt-get install -y \
    # Python 3.11
    software-properties-common \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-distutils \
    # Basic tools
    wget \
    curl \
    git \
    # Image libraries
    libmagic1 \
    libgomp1 \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgl1-mesa-glx \
    libglib2.0-0 \
    # Image format libraries
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libwebp-dev \
    # OCR dependencies
    tesseract-ocr \
    libtesseract-dev \
    # PDF processing
    poppler-utils \
    # Clean up
    && rm -rf /var/lib/apt/lists/*

# Set Python 3.11 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 \
    && update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

# Install pip for Python 3.11
RUN curl -sS https://bootstrap.pypa.io/get-pip.py | python3.11

# Install UV
COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv

# Enable bytecode compilation
ENV UV_COMPILE_BYTECODE=1

# Copy from the cache instead of linking since it's a mounted volume
ENV UV_LINK_MODE=copy

# Set CUDA environment variables
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}

WORKDIR /app

# Create a temporary pyproject.toml for CUDA dependencies
RUN echo '[project]' > /tmp/cuda-deps.toml && \
    echo 'name = "cuda-deps"' >> /tmp/cuda-deps.toml && \
    echo 'version = "0.1.0"' >> /tmp/cuda-deps.toml && \
    echo 'dependencies = [' >> /tmp/cuda-deps.toml && \
    echo '    "torch==2.1.0",  # CUDA 11.8 compatible' >> /tmp/cuda-deps.toml && \
    echo '    "torchvision==0.16.0",' >> /tmp/cuda-deps.toml && \
    echo ']' >> /tmp/cuda-deps.toml

# Install PyTorch with CUDA support first
RUN pip install torch==2.1.0+cu118 torchvision==0.16.0+cu118 --index-url https://download.pytorch.org/whl/cu118

# Install the project's dependencies using the lockfile and settings
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    uv sync --frozen --no-install-project --no-dev

# Copy application code
COPY mime_detector.py .
COPY app.py .
COPY app_cuda.py .
COPY docling_serve/ ./docling_serve/
COPY pyproject.toml .
COPY uv.lock .
COPY README.md .

# Sync the project
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev

# Download EasyOCR models during build with GPU support
RUN uv run python -c "import easyocr; reader = easyocr.Reader(['en'], gpu=True)" || true

# Create necessary directories
RUN mkdir -p /tmp/docling /data

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV DOCLING_SERVE_ENABLE_UI=1
ENV DOCLING_SERVE_MAX_DOCUMENT_SIZE=52428800
ENV DOCLING_SERVE_HOST=0.0.0.0
ENV DOCLING_SERVE_PORT=5001
# Enable GPU for OCR
ENV CUDA_VISIBLE_DEVICES=0
ENV DOCLING_OCR_USE_GPU=true

# Expose port
EXPOSE 5001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:5001/health || exit 1

# Run the application with CUDA-aware app
CMD ["uv", "run", "uvicorn", "app_cuda:app", "--host", "0.0.0.0", "--port", "5001", "--workers", "1"]